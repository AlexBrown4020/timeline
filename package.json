{
  "name": "timeline",
  "version": "0.1.0",
  "private": true,
  "engines": {
    "node": "16.13.2"
  },
  "scripts": {
    "serve": "vue-cli-service serve",
    "build": "vue-cli-service build",
    "lint": "vue-cli-service lint",
    "apollo": "vue-cli-service apollo:dev --generate-schema",
    "apollo:schema:generate": "vue-cli-service apollo:schema:generate",
    "apollo:schema:publish": "vue-cli-service apollo:schema:publish",
    "apollo:start": "vue-cli-service apollo:start"
  },
  "dependencies": {
    "@apollo/gateway": "^2.0.2",
    "@vue/apollo-composable": "^4.0.0-alpha.17",
    "apollo-boost": "^0.4.9",
    "apollo-server": "^3.7.0",
    "cache-loader": "^4.1.0",
    "core-js": "^3.8.3",
    "dotenv": "^16.0.1",
    "express": "^4.18.1",
    "graphql": "^16.5.0",
    "graphql-type-json": "^0.2.1",
    "knex": "^2.0.0",
    "lowdb": "^1.0.0",
    "mkdirp": "^0.5.1",
    "morgan": "^1.10.0",
    "path": "^0.12.7",
    "pg": "^8.7.3",
    "shortid": "^2.2.8",
    "vue": "^2.6.14",
    "vue-apollo": "^3.0.0-beta.11"
  },
  "devDependencies": {
    "@babel/core": "^7.12.16",
    "@babel/eslint-parser": "^7.12.16",
    "@vue/cli-plugin-babel": "~5.0.0",
    "@vue/cli-plugin-eslint": "~5.0.0",
    "@vue/cli-service": "~5.0.0",
    "eslint": "^7.32.0",
    "eslint-plugin-graphql": "^4.0.0",
    "eslint-plugin-vue": "^8.0.3",
    "graphql-tag": "^2.9.0",
    "vue-cli-plugin-apollo": "^0.21.3",
    "vue-template-compiler": "^2.6.14"
  },
  "eslintConfig": {
    "root": true,
    "env": {
      "node": true
    },
    "extends": [
      "plugin:vue/essential",
      "eslint:recommended"
    ],
    "parserOptions": {
      "parser": "@babel/eslint-parser"
    }
  },
  "browserslist": [
    "> 1%",
    "last 2 versions",
    "not dead"
  ],
  "description": "```\r 1. Run: vue ui - Opens the vue user interface on local host, create new project.\r 2. Run: vue add eslint - Add linter error checking for project.\r 3. Run: npm add apollo / npm install --save @vue/apollo-composable - Ensure you have an apollo account when for installation. Run: npm run apollo to start the server.\r 4. Run: npm install --save graphql - Install graphql dependencies\r 5. Test that apollo client can listen for the inbuilt queries (e.g. hello) by writing in the apollo terminal: query Query { hello(name:\"Your name here\")} If it can respond with your name, it is connected.\r 6. Run: npm install pg --save - Install postgres as our database.\r 7. Run: npm install knex --save - Install knex for communicating between our database and backend.\r 8. Run: npm install express dotenv --save - Install express and dotenv for handling .env files and application framework for node.js.\r 9. Run: knex init - Initialize a knexfile into your project.\r 10. Run: knex migrate:up / knex migrate:latest - populate local database with tables.\r 11. Run: knex seed:run - populate the local tables with sample data.\r 12. Require Heroku, depending on the system you are running: (\"https://devcenter.heroku.com/articles/heroku-cli#install-the-heroku-cli\")\r 13. Run: psql --host=yourHostName --port=portNumber --username=yourUserName --password=yourPassword --dbname=yourDbName - Ensure you check heroku's settings for your database credentials.  The order of the credentials is important.  You will be prompted for a password, use herokus database password.\r 14. Open a new terminal, connect directly to your timeline project database by copying the Heroku CLI into your terminal, it should look something like this: heroku pg:psql postgresql-infinite-***** --app <ProjectName>\r 15.Run: heroku git:remote -a <ProjectName> - Use this if you cannot run migrations to heroku.\r 16.Run: npm install --save morgan\r 17:Run: npm install --save path\r 18.Run: npm install --save apollo-boost",
  "main": "apollo.config.js",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/AlexBrown4020/timeline.git"
  },
  "author": "",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/AlexBrown4020/timeline/issues"
  },
  "homepage": "https://github.com/AlexBrown4020/timeline#readme"
}
